#!/usr/bin/env python3

"""Clone a fork of a git repository
"""

import argparse
import getpass
import os
import re
import subprocess
import sys
from pathlib import Path

REMOTE_REGEX = re.compile(
    r"\A(?:http(?:s)?://|git@)"
    r"(?P<host>[\w_\.-]+)(?::|/)"
    r"(?P<group>\S+)/"
    r"(?P<project>[\w_\.-]+?)"
    r"(?:\.git)?\Z"
)


def _default_github_user():
    user = getpass.getuser()
    if user in {
        'duncan',
        'duncan.macleod',
        'duncan.macleod',
        'spxdmm',
        'c.spxdmm',
    }:
        return 'duncanmmacleod'
    return user


def parse_url(url):
    # parse project URL
    try:
        return REMOTE_REGEX.match(url).groups()
    except AttributeError:
        host = "github.com"
        group, project = url.rsplit("/", 1)
        return host, group, project


def shell(cmd, *args, **kwargs):
    if isinstance(cmd, str):
        cmd = cmd.split()
    print("$ {}".format(" ".join(cmd)))
    subprocess.check_call(cmd, *args, **kwargs)


def git_add_remote(url, remote="origin"):
    # link the original to the fork as 'upstream'
    shell("git remote add {} {}".format(remote, url))
    shell("git fetch --quiet {}".format(remote))


DEFAULT_USER = os.getenv("GITHUB_USER", _default_github_user())


def create_parser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        'upstream',
        metavar='git@host/group/project',
        help='URL of git project',
    )
    parser.add_argument(
        '-t',
        '--target',
        help='target directory for clone link',
        metavar='DIR',
        default=None,
    )
    parser.add_argument(
        '-u',
        '--user',
        help='username of fork owner',
        default=DEFAULT_USER,
        required=DEFAULT_USER is None,
    )
    parser.add_argument(
        '--no-recursive',
        action='store_true',
        default=False,
        help='don\'t clone in a --recursive way',
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        default=False,
        help='don\'t use --quiet git commands',
    )
    return parser


def main(args=None):
    # parse command-line arguments
    parser = create_parser()
    args = parser.parse_args(args=args)

    # parse repo name
    host, group, project = parse_url(args.upstream)

    # define default target
    if args.target is None:
        args.target = project
    args.target = os.path.normpath(args.target)

    # -- clone the upstream repo

    path = Path(host) / group / project
    path.parent.mkdir(exist_ok=True, parents=True)

    upstream = f"git@{host}:{group}/{project}.git"
    cloneargs = [upstream, str(path), "--origin", "upstream"]
    if not args.no_recursive:
        cloneargs.insert(0, '--recursive')
    if not args.verbose:
        cloneargs.insert(0, '--quiet')
    shell('git clone %s' % ' '.join(cloneargs))

    # -- link the upstream path to the local dir

    if args.target != "-":
        target = Path(args.target)
        target.symlink_to(
            path,
            target_is_directory=True,
        )

    # -- add the fork as a new remote

    here = Path.cwd()
    os.chdir(path)
    fork = f"git@{host}:{args.user}/{project}.git"
    git_add_remote(fork, "origin")
    os.chdir(here)

    print(f"Fork is ready in {path}")


if __name__ == "__main__":
    sys.exit(main())
