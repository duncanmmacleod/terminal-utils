#!/usr/bin/env python

"""Clone a fork of a repository on github.com
"""

import argparse
import getpass
import os
import subprocess

if getpass.getuser() in {'duncan', 'duncan.macleod', 'spxdmm'}:
    DEFAULT_USER = 'duncanmmacleod'
else:
    DEFAULT_USER = None


def shell(cmd, *args, **kwargs):
    if isinstance(cmd, str):
        cmd = cmd.split()
    print("$ {}".format(" ".join(cmd)))
    subprocess.check_call(cmd, *args, **kwargs)


def get_branch_name():
    for line in subprocess.check_output(["git", "branch"]).splitlines():
        if line.startswith(b'*'):
            return line.split()[-1].decode("utf-8")


def link_upstream(upstream_url):
    # link the original to the fork as 'upstream'
    shell("git remote add upstream {}".format(upstream_url))
    shell("git fetch --quiet upstream")
    # link upstream branch as the reference
    branch = get_branch_name()
    shell("git branch --quiet {0} -u upstream/{0}".format(branch))


parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    'upstream',
    metavar='org/repo',
    help='URI of repo on github.com, e.g. gwpy/gwpy',
)
parser.add_argument(
    'target',
    help='target directory for clone',
    metavar='DIR',
)
parser.add_argument(
    '-u',
    '--user',
    help='username of fork owner',
    default=DEFAULT_USER,
    required=DEFAULT_USER is None,
)
parser.add_argument(
    '-s',
    '--git-server',
    default='git@github.com',
    help='URL of git server',
)
parser.add_argument(
    '--no-recursive',
    action='store_true',
    default=False,
    help='don\'t clone in a --recursive way',
)
parser.add_argument(
    '--verbose',
    action='store_true',
    default=False,
    help='don\'t use --quiet git commands',
)

args = parser.parse_args()
args.target = os.path.normpath(args.target)

# parse repo path
parts = args.upstream.rsplit('/', 2)
if len(parts) == 3:
    host, org, repo = parts
elif len(parts) == 2 and parts[0].startswith("git@"):
    repo = parts[1]
    host, org = parts[0].rsplit(':', 1)
elif len(parts) == 2:
    host = args.git_server
    org, repo = parts
else:
    host = args.git_server
    org = repo = parts[0]

# strip out scheme
if host.startswith("git@"):
    host = host[4:]
elif host.startswith(("http://", "https://")):
    host = host.split("//", 1)[1]

# define upstream and fork URLs
upstream = "https://{host}/{user}/{repo}.git".format(
    host=host,
    user=org,
    repo=repo,
)
fork = "git@{host}:{user}/{repo}.git".format(
    host=host,
    user=args.user,
    repo=repo,
)

# clone the repo
cloneargs = [fork, args.target]
if not args.no_recursive:
    cloneargs.insert(0, '--recursive')
if not args.verbose:
    cloneargs.insert(0, '--quiet')
shell('git clone %s' % ' '.join(cloneargs))

# enter the clone
os.chdir(args.target)

# use the upstream default branch
link_upstream(upstream)

print("Fork is ready in %s" % args.target)
