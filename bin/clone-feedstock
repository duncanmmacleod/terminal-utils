#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2022 Cardiff University

"""Clone a conda-forge feedstock with various remotes.
"""

import argparse
import getpass
import os
import subprocess
import sys
from pathlib import Path

GIT_HOST = "github.com"
GITHUB_ORG = "conda-forge"
CONDA_FORGE_ADMIN_NAME = "conda-forge-admin"
CONDA_FORGE_BOT_NAME = "regro-cf-autotick-bot"


def _default_github_user():
    user = getpass.getuser()
    if user in {
        'duncan',
        'duncan.macleod',
        'duncan.macleod',
        'spxdmm',
        'c.spxdmm',
    }:
        return 'duncanmmacleod'
    return user


DEFAULT_USER = os.getenv("GITHUB_USER", _default_github_user())


def create_parser():
    """Create an `argparse.ArgumentParser` for this utility.
    """
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "feedstock",
        help="name of the feedstock",
    )
    parser.add_argument(
        "-H",
        "--git-host",
        default=GIT_HOST,
        help="FQDN of git host to talk to",
    )
    parser.add_argument(
        "-u",
        "--username",
        default=DEFAULT_USER,
        required=DEFAULT_USER is None,
        help="username for `origin` remote",
    )
    return parser


def git(subcmd, *args, **kwargs):
    """Run a `git` subcommand using `subprocess.call`.
    """
    check = kwargs.pop("check", True)
    cmd = ["git", subcmd, *args]
    print(f"$ {' '.join(cmd)}")
    if check:
        return subprocess.check_call(cmd, **kwargs)
    return subprocess.call(cmd, **kwargs)


def main():
    """Run the thing.
    """
    parser = create_parser()
    params = parser.parse_args()

    # format namespace
    feedstock = f"{params.feedstock}-feedstock"
    git_url = f"git@{params.git_host}:{{}}/{feedstock}.git".format

    # clone upstream
    git("clone", git_url(GITHUB_ORG), "--origin", "upstream")
    os.chdir(feedstock)
    for uname, remote in (
        (CONDA_FORGE_ADMIN_NAME, CONDA_FORGE_ADMIN_NAME),
        (CONDA_FORGE_BOT_NAME, CONDA_FORGE_BOT_NAME),
        (params.username, "origin"),
    ):
        git("remote", "add", remote, git_url(uname))
        git("fetch", remote, check=False)

    print(f"-- Feedstock cloned to {Path.cwd()}")


if __name__ == "__main__":
    sys.exit(main())
